//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""OnGround"",
            ""id"": ""f8598102-d52f-48dc-9eba-40bbbfec5d6c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9eb28368-ae61-4e04-87fb-8839d3fec8e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8b521d1c-4075-46c0-a468-5b30ae60be7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""18fcbf34-cb5b-4979-8a93-45cbca5e7d91"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""e6ddad34-fed5-4763-b4d6-599ebeb52043"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""85e993c5-863b-488b-a593-190f0cf7d515"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b00a9fba-20a2-4637-b51b-ab0bd5828ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5fbc536f-f43a-430d-b1bf-7e6c281129bc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""905d61bd-df6a-4f94-9fc0-eaef2ae94c0f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a39559c-e08d-4bc8-b519-e03d3635b578"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""594b5676-8563-402d-aed7-4acfc1a9e1c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c9c00a0-4297-4968-8738-f68233f94102"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""456799d7-57ee-424a-aef4-846894108d16"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bba93ae8-af66-4159-a513-ea07c5fdcc1a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a9edb9a-546e-4658-89cc-e25207b3cd6d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b674d68-ecfd-4fde-b890-4f0d7d650b37"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a844480a-d071-4b9b-91ae-d49008c8d34d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hiding"",
            ""id"": ""2909b020-13b6-48fd-bd99-aa029f9f34d1"",
            ""actions"": [
                {
                    ""name"": ""GetOut"",
                    ""type"": ""Button"",
                    ""id"": ""3be2ce2e-f877-4b4d-aaf9-14ba9a7bd7a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd2ae36d-e872-4871-850a-6ec4f581c295"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnGround
        m_OnGround = asset.FindActionMap("OnGround", throwIfNotFound: true);
        m_OnGround_Move = m_OnGround.FindAction("Move", throwIfNotFound: true);
        m_OnGround_Jump = m_OnGround.FindAction("Jump", throwIfNotFound: true);
        m_OnGround_Look = m_OnGround.FindAction("Look", throwIfNotFound: true);
        m_OnGround_Interact = m_OnGround.FindAction("Interact", throwIfNotFound: true);
        m_OnGround_Crouch = m_OnGround.FindAction("Crouch", throwIfNotFound: true);
        m_OnGround_Sprint = m_OnGround.FindAction("Sprint", throwIfNotFound: true);
        // Hiding
        m_Hiding = asset.FindActionMap("Hiding", throwIfNotFound: true);
        m_Hiding_GetOut = m_Hiding.FindAction("GetOut", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnGround
    private readonly InputActionMap m_OnGround;
    private IOnGroundActions m_OnGroundActionsCallbackInterface;
    private readonly InputAction m_OnGround_Move;
    private readonly InputAction m_OnGround_Jump;
    private readonly InputAction m_OnGround_Look;
    private readonly InputAction m_OnGround_Interact;
    private readonly InputAction m_OnGround_Crouch;
    private readonly InputAction m_OnGround_Sprint;
    public struct OnGroundActions
    {
        private @PlayerControl m_Wrapper;
        public OnGroundActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_OnGround_Move;
        public InputAction @Jump => m_Wrapper.m_OnGround_Jump;
        public InputAction @Look => m_Wrapper.m_OnGround_Look;
        public InputAction @Interact => m_Wrapper.m_OnGround_Interact;
        public InputAction @Crouch => m_Wrapper.m_OnGround_Crouch;
        public InputAction @Sprint => m_Wrapper.m_OnGround_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_OnGround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnGroundActions set) { return set.Get(); }
        public void SetCallbacks(IOnGroundActions instance)
        {
            if (m_Wrapper.m_OnGroundActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnLook;
                @Interact.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnInteract;
                @Crouch.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnCrouch;
                @Sprint.started -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_OnGroundActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_OnGroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public OnGroundActions @OnGround => new OnGroundActions(this);

    // Hiding
    private readonly InputActionMap m_Hiding;
    private IHidingActions m_HidingActionsCallbackInterface;
    private readonly InputAction m_Hiding_GetOut;
    public struct HidingActions
    {
        private @PlayerControl m_Wrapper;
        public HidingActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @GetOut => m_Wrapper.m_Hiding_GetOut;
        public InputActionMap Get() { return m_Wrapper.m_Hiding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HidingActions set) { return set.Get(); }
        public void SetCallbacks(IHidingActions instance)
        {
            if (m_Wrapper.m_HidingActionsCallbackInterface != null)
            {
                @GetOut.started -= m_Wrapper.m_HidingActionsCallbackInterface.OnGetOut;
                @GetOut.performed -= m_Wrapper.m_HidingActionsCallbackInterface.OnGetOut;
                @GetOut.canceled -= m_Wrapper.m_HidingActionsCallbackInterface.OnGetOut;
            }
            m_Wrapper.m_HidingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GetOut.started += instance.OnGetOut;
                @GetOut.performed += instance.OnGetOut;
                @GetOut.canceled += instance.OnGetOut;
            }
        }
    }
    public HidingActions @Hiding => new HidingActions(this);
    public interface IOnGroundActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IHidingActions
    {
        void OnGetOut(InputAction.CallbackContext context);
    }
}
